{
  "hash": "cf762602e4d2e89cc36ff2400cbecb5a",
  "result": {
    "markdown": "---\ntitle: \"Colorblind palettes in R with viridisLite package\"\ndate: \"2022-10-30\"\ncategories: [R, Visualization, Accessibility]\nimage: viridis_thumbnail.png\nformat:\n  html:\n    fontsize: 0.9em\n    code-tools: true\n    include-in-header: navbar.html\n    css: theme.css\n    toc: true\ncomments: \n    utterances: \n      repo:  G-Bez/my-portfolio \n      theme: photon-dark\ntitle-block-banner: false\neditor: visual\n---\n\n::: {.cell}\n<style type=\"text/css\">\n.justify {\n  text-align: justify !important\n}\n</style>\n:::\n\n\n## viridisLite package\n\n::: justify\n[`viridisLite`](https://sjmgarnier.github.io/viridisLite/) is a lightweight version of `viridis` package. Both are meant to provide a series of color maps designed to improve graph readability for readers with common forms of vision impairment. Base `viridis` provides additional functionalities, while `viridsLite` is meant to be as lightweight and dependency-free as possible, for maximum compatibility with all the R ecosystems.\n\nThe package can be installed with:\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"viridisLite\")\n```\n:::\n\n\n::: justify\nOr you can install the developer version with:\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::install_github(\"sjmgarnier/viridisLite\")\n```\n:::\n\n\n## Palettes\n\n::: justify\n`viridisLite` offers 8 color palettes to choose from (see @fig-pal), via the corresponding convenience functions, useful when the scale must be passed as a function name. Each of those functions returns a character vector of color hex codes.\n\n![viridisLite color palettes](viridis-scales.png){#fig-pal fig-align=\"center\"}\n\nBelow you can see the general syntax of `viridiLite` convenience functions:\n:::\n\n``` r\npalette_name(n, alpha = 1, begin = 0, end = 1, direction = 1)\n```\n\n::: justify\nWhere:\n\n-   **n**: Number of colors to be in the palette .\n-   **alpha**: transparency, with 1 = no transparency, and 0 = max. transparency.\n-   **begin**: starting hue.\n-   **end**: ending hue.\n-   **direction**: order of colors. 1 = order from darkest to lightest. 0 = from lightest to darkest.\n\nSee the [official documentation](https://sjmgarnier.github.io/viridisLite/reference/viridis.html#examples) for more details. Following, I provide some examples.\n:::\n\n## Packages\n\n::: justify\nWe start by loading the packages we'll use throughout this tutorial.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(viridisLite)\nlibrary(scales)\nlibrary(patchwork)\n```\n:::\n\n\n## Show color palettes\n\n::: justify\nSince the output of `viridisLite` functions consists of a vector of hex codes, it's quite hard to tell precisely which colors were actually picked. `scales` package provides a convenient and very easy way to visualize user generated palettes. See the following example.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\npal <- viridisLite::mako(25)\npal\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"#0B0405FF\" \"#170C14FF\" \"#211423FF\" \"#2B1C35FF\" \"#342346FF\" \"#3A2C58FF\"\n [7] \"#3E356BFF\" \"#413E7EFF\" \"#40498EFF\" \"#3B5698FF\" \"#38629DFF\" \"#366FA0FF\"\n[13] \"#357BA2FF\" \"#3486A5FF\" \"#3492A8FF\" \"#359EAAFF\" \"#38AAACFF\" \"#3FB6ADFF\"\n[19] \"#49C1ADFF\" \"#5BCDADFF\" \"#78D6AEFF\" \"#96DDB5FF\" \"#B1E4C2FF\" \"#C9ECD3FF\"\n[25] \"#DEF5E5FF\"\n```\n:::\n:::\n\n\n::: justify\nWith `scales::show_col()` function we can plot 'pal' as a color matrix.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscales::show_col(pal)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=100% height=250%}\n:::\n:::\n\n\n## Plot examples\n\n::: justify\nBelow I provide some plot examples:\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(x = rnorm(20000), y = rnorm(20000))\nvL_pals <- c(\"viridis\", \"magma\", \"inferno\", \"plasma\", \"cividis\", \"rocket\",\n             \"mako\", \"turbo\")\n\nls <- vector(mode = \"list\", length = length(vL_pals))\nnames(ls) <- vL_pals\n\nfor (i in 1:length(vL_pals)) {\n  pal_parsed = parse(text = vL_pals[i])\n  \n  ls[[i]] <- ggplot2::ggplot(df, aes(x, y)) +\n    stat_density2d(aes(fill = after_stat(level)), \n                   alpha = .5, geom = \"polygon\", n = 200) +\n    scale_fill_gradientn(colours = eval(pal_parsed)(n = 256)) +\n    ggtitle(label = vL_pals[i])\n}\n\n(ls[[1]] + ls[[2]]) / (ls[[3]] + ls[[4]]) / (ls[[5]] + ls[[6]]) / (ls[[7]] + ls[[8]]) # patchwork composition\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=100% height=250%}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}