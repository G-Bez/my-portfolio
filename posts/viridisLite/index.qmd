---
title: "Colorblind palettes in R with viridisLite package"
date: "2022-10-30"
categories: [R, Visualization, Accessibility]
image: viridis_thumbnail.png
format:
  html:
    fontsize: 0.9em
    code-tools: true
    include-in-header: navbar.html
    css: theme.css
comments: 
    utterances: 
      repo:  G-Bez/my-portfolio 
      theme: photon-dark
title-block-banner: false
editor: visual
---

::: {style="text-align: justify"}
## viridisLite package

[`viridisLite`](https://sjmgarnier.github.io/viridisLite/) is a lightweight version of `viridis` package. Both are meant to provide a series of color maps designed to improve graph readability for readers with common forms of vision impairment. Base `viridis` provides additional functionalities, while `viridsLite` is meant to be as lightweight and dependency-free as possible, for maximum compatibility with all the R ecosystems.

The package can be installed with:

```{r}
#| eval: false
install.packages("viridisLite")
```

Or you can install the developer version with:

```{r}
#| eval: false
devtools::install_github("sjmgarnier/viridisLite")
```

## Palettes

`viridisLite` offers 8 color palettes to choose from (see @fig-pal), via the corresponding convenience functions, useful when the scale must be passed as a function name. Each of those functions returns a character vector of color hex codes.

![viridisLite color palettes](viridis-scales.png){#fig-pal fig-align="center"}

Below you can see the general syntax of `viridiLite` convenience functions:

``` r
palette_name(n, alpha = 1, begin = 0, end = 1, direction = 1)
```

Where:

-   **n**: Number of colors to be in the palette .
-   **alpha**: transparency, with 1 = no transparency, and 0 = max. transparency.
-   **begin**: starting hue.
-   **end**: ending hue.
-   **direction**: order of colors. 1 = order from darkest to lightest. 0 = from lightest to darkest.

See the [official documentation](https://sjmgarnier.github.io/viridisLite/reference/viridis.html#examples) for more details. Following, we provide some examples.

## Packages

We start by loading the packages we'll use throughout this tutorial.

```{r}
library(ggplot2)
library(viridisLite)
library(scales)
library(patchwork)
```

## Show color palettes

Since the output of `viridisLite` functions consists of a vector of hex codes, it's quite hard to tell precisely which colors were actually picked. `scales` package provides a convenient and very easy way to visualize user generated palettes. See the following example.

```{r}
pal <- viridisLite::mako(25)
pal
```

With `scales::show_col()` function we can plot 'pal' as a color matrix.

```{r}
#| out-width: 100%
#| out-height: 250%
scales::show_col(pal)
```

## Plot examples

Here we provide some plot examples:

```{r}
#| out-width: 100%
#| out-height: 250%
df <- data.frame(x = rnorm(20000), y = rnorm(20000))
vL_pals <- c("viridis", "magma", "inferno", "plasma", "cividis", "rocket",
             "mako", "turbo")

ls <- vector(mode = "list", length = length(vL_pals))
names(ls) <- vL_pals

for (i in 1:length(vL_pals)) {
  pal_parsed = parse(text = vL_pals[i])
  
  ls[[i]] <- ggplot2::ggplot(df, aes(x, y)) +
    stat_density2d(aes(fill = ..level..), 
                   alpha = .5, geom = "polygon", n = 200) +
    scale_fill_gradientn(colours = eval(pal_parsed)(n = 256)) +
    ggtitle(label = vL_pals[i])
}

(ls[[1]] + ls[[2]]) / (ls[[3]] + ls[[4]]) / (ls[[5]] + ls[[6]]) / (ls[[7]] + ls[[8]]) # patchwork composition
```
:::
